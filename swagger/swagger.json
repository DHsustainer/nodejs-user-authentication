{
	"swagger":"2.0",
	"info":{
		"description":"Swagger documentation for user-service rest API",
		"version":"0.2.0",
		"title":"User Service API",
		"termsOfService":"http://swagger.io/terms/",
		"contact":{
			"email":"camilomontoya2@gmail.com"
		},
		"license":{
			"name":"Apache 2.0",
			"url":"http://www.apache.org/licenses/LICENSE-2.0.html"
		}
	},
	"host":"localhost:40000",
	"basePath":"/api/v0",
	"tags":[
		{
			"name":"Auth",
			"description":"Everything you need to authenticate",
			"externalDocs":{
				"description":"Find out more",
				"url":"http://swagger.io"
			}
		},
		{
			"name":"Users",
			"description":"Operations about user",
			"externalDocs":{
				"description":"Find out more about our store",
				"url":"http://swagger.io"
			}
		}
	],
	"schemes":[
		"http"
	],
	"paths":{
		"/authenticate":{
			"post":{
				"tags":[
					"Auth"
				],
				"summary":"authenticate an API user",
				"description":"Send the e-mail and password of a user to authenticate it",
				"operationId":"authUser",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"in":"body",
						"name":"body",
						"description":"authentication object",
						"required":true,
						"schema":{
							"$ref":"#/definitions/Auth"
						}
					}
				],
				"responses":{
					"403":{
						"description":"Authentication failed. Wrong user or password."
					},
					"200":{
						"description":"Authentication worked fine, and you are authenticated"
					}
				}
			}
		},
		"/me":{
			"get":{
				"tags":[
					"Auth"
				],
				"summary":"Returns the current user",
				"description":"If a user is authenticated it will be return that user object",
				"operationId":"authMe",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"Returns the current authenticated user"
					}
				}
			}
		},
		"/users":{
			"get":{
				"tags":[
					"Users"
				],
				"summary":"Returns an Array of users",
				"description":"This endpoint retuns a list of user objects",
				"operationId":"usersList",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"in":"query",
						"name":"email",
						"description":"email",
						"type":"string"
					},
					{
						"in":"query",
						"name":"type",
						"description":"type of user",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"Returns Array of user objects"
					}
				}
			},
			"post":{
				"tags":[
					"Users"
				],
				"summary":"Creates a user",
				"description":"With this endpoint you can create a user",
				"operationId":"usersCreate",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"in":"body",
						"name":"body",
						"description":"User Object",
						"required":true,
						"schema":{
							"$ref":"#/definitions/UserPost"
						}
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"201":{
						"description":"User is created, and returns the current User"
					},
					"400":{
						"description":"Error because a mandatory property is missed, or other user Error"
					}
				}
			}
		},
		"/users/{userId}":{
			"get":{
				"tags":[
					"Users"
				],
				"summary":"Get a user record",
				"description":"This returns a user object putting its userId in the path",
				"operationId":"usersFindById",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"name":"userId",
						"in":"path",
						"required":true,
						"description":"ID of pet that needs to be updated",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"Returns a user object"
					},
					"404":{
						"description":"if the user is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			},
			"put":{
				"tags":[
					"Users"
				],
				"summary":"Update a user",
				"description":"With this endpoint you can update a user object",
				"operationId":"usersUpdate",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"in":"body",
						"name":"body",
						"description":"User Object",
						"required":true,
						"schema":{
							"$ref":"#/definitions/UserPost"
						}
					},
					{
						"name":"userId",
						"in":"path",
						"required":true,
						"description":"ID of pet that needs to be updated",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"200":{
						"description":"User is created, and returns the current User"
					},
					"400":{
						"description":"Error because a mandatory property is missed, or other user Error"
					},
					"404":{
						"description":"if the user is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			},
			"delete":{
				"tags":[
					"Users"
				],
				"summary":"Deletes a user record",
				"description":"Delete a user record with its ID",
				"operationId":"usersDelete",
				"consumes":[
					"application/json",
					"application/xml"
				],
				"produces":[
					"application/xml",
					"application/json"
				],
				"parameters":[
					{
						"name":"userId",
						"in":"path",
						"required":true,
						"description":"ID of pet that needs to be updated",
						"type":"string"
					}
				],
				"responses":{
					"403":{
						"description":"Failed to verify token or token not provided."
					},
					"204":{
						"description":"The user was deleted successfully"
					},
					"404":{
						"description":"if the user is not found"
					},
					"500":{
						"description":"If Cast to ObjectId failed for value or internal server error"
					}
				}
			}
		}
	},
	"securityDefinitions":{
		"api_key":{
			"type":"apiKey",
			"name":"api_key",
			"in":"header"
		}
	},
	"definitions":{
		"Auth":{
			"type":"object",
			"required":[
				"email",
				"password"
			],
			"properties":{
				"email":{
					"type":"string",
					"example":"camilomontoya2@gmail.com"
				},
				"password":{
					"type":"string",
					"example":"test4echo"
				}
			},
			"xml":{
				"name":"Pet"
			}
		},
		"UserPost":{
			"type":"object",
			"required":[
				"email",
				"password",
				"type"
			],
			"properties":{
				"email":{
					"type":"string",
					"example":"camilomontoya2@gmail.com"
				},
				"password":{
					"type":"string",
					"example":"test4echo"
				},
				"type":{
					"type":"string",
					"example":"admin_user"
				}
			},
			"xml":{
				"name":"Pet"
			}
		}
	},
	"externalDocs":{
		"description":"Find out more about Swagger",
		"url":"http://swagger.io"
	}
}